# DON'T EDIT THIS FILE
# If you would like a common place to put things, please create a ~/.localrc
# since this file will include it after all variables are defined.

###############################################################################
# OPTIONS
###############################################################################

export LESS="--tabs=4 --no-init --LONG-PROMPT --ignore-case --quit-if-one-screen --RAW-CONTROL-CHARS"

# Define the WORKON_HOME for virtualenv
if [ -z "$WORKON_HOME" ]; then
	export WORKON_HOME=$HOME/.virtualenvs
fi

# Define the PROJECT_HOME for virtualenv
if [ -z "$PROJECT_HOME" ]; then
	export PROJECT_HOME=$HOME/Projects
fi

# export pyenv environment
if [ -z "$PYENV_ROOT" ]; then
	export PYENV_ROOT="$HOME/.pyenv"
fi

if [ -z "$EDITOR" ] && (( $+commands[vim] )) ; then
	export EDITOR=$(which vim)
fi

# start the powerline daemon
if which powerline-daemon &> /dev/null; then
	powerline-daemon -q
fi

###############################################################################
# ALIASES
###############################################################################

# Directory coloring

if [[ "$OSTYPE" =~ ^(darwin|freebsd|linux-musl) ]]; then
	export CLICOLOR="YES" # Equivalent to passing -G to ls.
	export LSCOLORS="ExGxFxdaCxDaDahbadacec"
	# Pulled this from ubuntu, also updated LSCOLORS to match
	export LS_COLORS="rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.zst=01;31:*.tzst=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.mjpg=01;35:*.mjpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:"


	# MacPorts
	[ -d "/opt/local/bin" ] && export PATH="/opt/local/bin:$PATH"

	# Prefer GNU version, since it respects dircolors.
	if which gls &>/dev/null; then
		alias ls='gls -Ch --file-type --color=auto'
	else
		alias ls='ls -CFh'
	fi
else
	alias ls='ls -Ch --file-type --color=auto'
fi

alias rm='rm -i'

# Capture output using trace
function __eg_capture() {
	if [[ $OSTYPE =~ ^(darwin) ]]; then
		sudo dtrace -p "$1" -qn '
			syscall::write*:entry
			/pid == $target && arg0 == 1/ {
				printf("%s", copyinstr(arg1, arg2));
			}
		'
	elif [[ $OSTYPE =~ ^(linux) ]]; then
		sudo strace -p"$1" -s9999 -e write
	fi
}

alias capture=__eg_capture

if [[ $OSTYPE =~ ^(darwin) ]]; then
	function __eg_mysql() {
		if [ -z "$1" ] && [ -z "$EG_MYSQL_OLD_PATH" ]; then
			echo "You must specify the MySQL version";
			return;
		elif [ ! -z "$1" ] && [ ! -d "/usr/local/opt/mysql@${1}" ]; then
			echo "MySQL version ${1} is not installed";
			return;
		fi

		version="$1"

		if [ ! -z "$EG_MYSQL_OLD_PATH" ]; then
			export PATH="$EG_MYSQL_OLD_PATH"
			unset EG_MYSQL_OLD_PATH
		fi

		if [ ! -z "$version" ]; then
			export EG_MYSQL_OLD_PATH="$PATH"
			export PATH="/usr/local/opt/mysql@${version}/bin:$PATH"
		fi
	}

	alias mysqlenv=__eg_mysql
fi

###
# Combines `ps` and `grep` to easily search processes. To pass arguments to ps
# place them before the search term: `__eg_psgrep aux httpd` Simply calling the
# function and passing a search term will execute `ps aux`
##
function __eg_psgrep()
{
	search=${@:$#}

	if [ "$#" -eq 1 ]
	then
		ps aux | head -n1; ps aux | grep -v grep | grep --color=always $search
	else
		# keep the space here for zsh
		# https://stackoverflow.com/questions/1215538/extract-parameters-before-last-parameter-in#comment112570591_1215592
		args=${@:1:$# -1}
		echo "${args}" | xargs ps | head -n1; echo "${args}" | xargs ps | grep -v grep | grep --color=always $search
	fi

}

# make easier use of the awesomeness
alias psgrep=__eg_psgrep

function __eg_pssize()
{
	search=${@:$#}

	if [ "$#" -eq 1 ]; then
		command=(__eg_psgrep -eo size,pid,user,command --sort -size $search)
	else
		command=(ps -eo size,pid,user,command --sort -size)
	fi

	"${command[@]}" | awk '{ hr=$1/1024 ; printf("%13.2f Mb ",hr) } { for ( x=2 ; x<=NF ; x++ ) { printf("%s ",$x) } print "" }'
}

alias pssize=__eg_pssize

###############################################################################
# LOCALRC
###############################################################################

# Import localrc (similar to common)
[ -f ~/.localrc ] && source ~/.localrc

# If we're bash, import .bashrc_local
[ -n "$BASH_VERSION" ] && [ -f ~/.bashrc_local ] && source ~/.bashrc_local

# If we're zsh, import .zshrc_local
[ -n "$ZSH_VERSION" ] && [ -f ~/.zshrc_local ] && source ~/.zshrc_local

###############################################################################
# PATHS
###############################################################################

# On MacOS we want to use the GNU coreutils
if [[ -n $HOMEBREW_PREFIX ]] && [ -d "$(brew --prefix coreutils)" ]; then
	export PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
	export MANPATH="$(brew --prefix coreutils)/libexec/gnuman:$MANPATH"
fi

# On MacOS we want to use the GNU find
if [[ -n $HOMEBREW_PREFIX ]] && [ -d "$(brew --prefix findutils)" ]; then
    export PATH="$(brew --prefix findutils)/libexec/gnubin:$PATH"
    export MANPATH="$(brew --prefix findutils)/libexec/gnuman:$MANPATH"
fi

# On MacOS we want to use the GNU awk
if [[ -n $HOMEBREW_PREFIX ]] && [ -d "$(brew --prefix gawk)" ]; then
    export PATH="$(brew --prefix gawk)/libexec/gnubin:$PATH"
    export MANPATH="$(brew --prefix gawk)/libexec/gnuman:$MANPATH"
fi

# On MacOS we want to use the GNU sed
if [[ -n $HOMEBREW_PREFIX ]] && [ -d "$(brew --prefix gnu-sed)" ]; then
    export PATH="$(brew --prefix gnu-sed)/libexec/gnubin:$PATH"
    export MANPATH="$(brew --prefix gnu-sed)/libexec/gnuman:$MANPATH"
fi

# On MacOS we want to use the GNU tar
if [[ -n $HOMEBREW_PREFIX ]] && [ -d "$(brew --prefix gnu-tar)" ]; then
    export PATH="$(brew --prefix gnu-tar)/libexec/gnubin:$PATH"
    export MANPATH="$(brew --prefix gnu-tar)/libexec/gnuman:$MANPATH"
fi

# Setup phpenv if it exists
if [ -d "$HOME/.phpenv/bin" ]; then
	export PATH="$HOME/.phpenv/bin/:$PATH"
	eval "$(phpenv init -)"
fi

# vendor/bin/ for composer projects - see http://getcomposer.org
# ~/.local/bin for local stuffs
export PATH=./vendor/bin:$HOME/.composer/vendor/bin:$HOME/.local/bin:$PATH

# vim: ft=sh